import os
import logging
import sqlite3
from pathlib import Path
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ü–£–¢–ï–ô --- #
BOT_DIR = Path("C:/Users/–ú–∞–∫—Å–∏–º/Desktop/botsystem")
DB_PATH = BOT_DIR / "petshop.db"
ENV_PATH = BOT_DIR / ".env"

# --- –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò --- #
load_dotenv(ENV_PATH)
TOKEN = os.getenv("TOKEN")
# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS = [5634800132, 5515360616]  # –í–∞—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–ù–ì–ê --- #
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# --- –ë–ê–ó–ê –î–ê–ù–ù–´–• --- #
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS pets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                mutation TEXT NOT NULL,
                price INTEGER NOT NULL,
                category TEXT NOT NULL,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                join_date TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS purchases (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                pet_id INTEGER,
                status TEXT DEFAULT 'pending',
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(id),
                FOREIGN KEY(pet_id) REFERENCES pets(id)
            )
        """)
        conn.commit()

def add_user(user_id, username, first_name, last_name):
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute(
            "INSERT OR IGNORE INTO users (id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
            (user_id, username, first_name, last_name)
        )

def add_pet(name, mutation, price, category):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO pets (name, mutation, price, category) VALUES (?, ?, ?, ?)",
            (name, mutation, price, category)
        )
        conn.commit()
        return cursor.lastrowid

def delete_pet(pet_id):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM pets WHERE id = ?", (pet_id,))
        conn.commit()
        return cursor.rowcount > 0

def get_pets_by_category(category):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM pets WHERE category = ? ORDER BY name", (category,))
        return cursor.fetchall()

def get_pet(pet_id):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM pets WHERE id = ?", (pet_id,))
        return cursor.fetchone()

def get_all_pets():
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM pets ORDER BY category, name")
        return cursor.fetchall()

def create_purchase(user_id, pet_id):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO purchases (user_id, pet_id) VALUES (?, ?)",
            (user_id, pet_id)
        )
        conn.commit()
        return cursor.lastrowid

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê --- #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username, user.first_name, user.last_name)
    
    buttons = [
        [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω –ø–∏—Ç–æ–º—Ü–µ–≤", callback_data="shop_menu")],
        [InlineKeyboardButton("‚Ñπ –û –±–æ—Ç–µ", callback_data="about")]
    ]
    
    if user.id in ADMINS:
        buttons.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(buttons)
    
    if update.message:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pet Shop!",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pet Shop!",
            reply_markup=reply_markup
        )

async def shop_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    buttons = [
        [InlineKeyboardButton("üêü Steal a Fish!", callback_data="category_fish")],
        [InlineKeyboardButton("üß† Steal a Brainrot", callback_data="category_brainrot")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        "üõí –ú–∞–≥–∞–∑–∏–Ω –ø–∏—Ç–æ–º—Ü–µ–≤:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def show_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category = query.data.split("_")[1]
    
    pets = get_pets_by_category(category)
    if not pets:
        buttons = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="shop_menu")]]
        await query.edit_message_text(
            f"‚Ñπ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return
    
    buttons = []
    for pet in pets:
        btn_text = f"{pet[1]} ({pet[2]}) - {pet[3]}‚ÇΩ"
        buttons.append([InlineKeyboardButton(btn_text, callback_data=f"pet_{pet[0]}")])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="shop_menu")])
    
    await query.edit_message_text(
        f"üêæ {category.capitalize()} –≤ –ø—Ä–æ–¥–∞–∂–µ:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def show_pet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    pet_id = int(query.data.split("_")[1])
    pet = get_pet(pet_id)
    
    if not pet:
        await query.edit_message_text("‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    buttons = []
    if query.from_user.id in ADMINS:
        buttons.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{pet[0]}")])
    buttons.append([InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{pet[0]}")])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"category_{pet[4]}")])
    
    await query.edit_message_text(
        f"üêæ <b>{pet[1]}</b>\n"
        f"üß¨ –ú—É—Ç–∞—Ü–∏—è: {pet[2]}\n"
        f"üíµ –¶–µ–Ω–∞: {pet[3]}‚ÇΩ\n"
        f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {pet[4]}\n\n"
        f"üÜî ID: {pet[0]}",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    pet_id = int(query.data.split("_")[1])
    pet = get_pet(pet_id)
    
    if not pet:
        await query.edit_message_text("‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    user = query.from_user
    purchase_id = create_purchase(user.id, pet_id)
    
    bot = Bot(token=TOKEN)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=f"üõí <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É #{purchase_id}</b>\n\n"
                     f"üêæ –ü–∏—Ç–æ–º–µ—Ü: {pet[1]} ({pet[2]})\n"
                     f"üíµ –¶–µ–Ω–∞: {pet[3]}‚ÇΩ\n"
                     f"üÜî ID –ø–∏—Ç–æ–º—Ü–∞: {pet[0]}\n\n"
                     f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user.first_name} (@{user.username or '–Ω–µ—Ç'})\n"
                     f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}\n\n"
                     f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: /confirm_{purchase_id}\n"
                     f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å: /reject_{purchase_id}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", url=f"tg://user?id={user.id}")],
                    [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞", callback_data=f"confirm_delete_{pet[0]}")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.edit_message_text(
        "‚úÖ <b>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º!</b>\n\n"
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: {pet[1]} ({pet[2]}) –∑–∞ {pet[3]}‚ÇΩ\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url=f"tg://user?id={ADMINS[0]}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"pet_{pet_id}")]
        ])
    )

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id not in ADMINS:
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    buttons = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞", callback_data="add_pet")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞", callback_data="delete_pet_menu")],
        [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤", callback_data="pet_list")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def add_pet_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data['adding_pet'] = {'step': 'name', 'data': {}}
    
    await query.edit_message_text(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–∏–º—è –ø–∏—Ç–æ–º—Ü–∞</b>:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
        ])
    )

async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'adding_pet' not in context.user_data:
        return
    
    text = update.message.text
    adding_data = context.user_data['adding_pet']
    
    if adding_data['step'] == 'name':
        adding_data['data']['name'] = text
        adding_data['step'] = 'mutation'
        await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–º—É—Ç–∞—Ü–∏—é –ø–∏—Ç–æ–º—Ü–∞</b>:", parse_mode="HTML")
    elif adding_data['step'] == 'mutation':
        adding_data['data']['mutation'] = text
        adding_data['step'] = 'price'
        await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö</b> (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", parse_mode="HTML")
    elif adding_data['step'] == 'price':
        try:
            adding_data['data']['price'] = int(text)
            adding_data['step'] = 'category'
            await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> (fish/brainrot):", parse_mode="HTML")
        except ValueError:
            await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    elif adding_data['step'] == 'category':
        category = text.lower()
        if category in ['fish', 'brainrot']:
            pet_data = adding_data['data']
            pet_data['category'] = category
            pet_id = add_pet(**pet_data)
            
            await update.message.reply_text(
                f"‚úÖ –ü–∏—Ç–æ–º–µ—Ü —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üêæ –ò–º—è: {pet_data['name']}\n"
                f"üß¨ –ú—É—Ç–∞—Ü–∏—è: {pet_data['mutation']}\n"
                f"üíµ –¶–µ–Ω–∞: {pet_data['price']}‚ÇΩ\n"
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {pet_data['category']}\n"
                f"üÜî ID: {pet_id}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
                ])
            )
            del context.user_data['adding_pet']
        else:
            await update.message.reply_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'fish' –∏–ª–∏ 'brainrot'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "main_menu":
        await start(update, context)
    elif query.data == "shop_menu":
        await shop_menu(update, context)
    elif query.data == "about":
        await query.edit_message_text(
            "ü§ñ <b>–û –±–æ—Ç–µ Pet Shop</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤:\n"
            "üêü Steal a Fish!\n"
            "üß† Steal a Brainrot!\n\n"
            "–î–ª—è —Å–≤—è–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É'",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
    elif query.data.startswith("category_"):
        await show_category(update, context)
    elif query.data.startswith("pet_"):
        await show_pet(update, context)
    elif query.data.startswith("buy_"):
        await handle_purchase(update, context)
    elif query.data == "admin_panel":
        await admin_panel(update, context)
    elif query.data == "add_pet":
        await add_pet_menu(update, context)
    elif query.data == "delete_pet_menu":
        pets = get_all_pets()
        if not pets:
            await query.edit_message_text(
                "‚Ñπ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
                ])
            )
            return
        
        buttons = [
            [InlineKeyboardButton(f"{pet[1]} (ID: {pet[0]}) - {pet[3]}‚ÇΩ", callback_data=f"pet_{pet[0]}")]
            for pet in pets
        ]
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
        
        await query.edit_message_text(
            "üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    elif query.data.startswith("confirm_delete_"):
        pet_id = int(query.data.split("_")[2])
        pet = get_pet(pet_id)
        
        await query.edit_message_text(
            f"‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞?\n\n"
            f"üêæ {pet[1]} ({pet[2]})\n"
            f"üíµ {pet[3]}‚ÇΩ | üìÅ {pet[4]}\n"
            f"üÜî ID: {pet[0]}",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"delete_{pet[0]}"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"pet_{pet[0]}")
                ]
            ])
        )
    elif query.data.startswith("delete_"):
        pet_id = int(query.data.split("_")[1])
        if delete_pet(pet_id):
            await query.edit_message_text("‚úÖ –ü–∏—Ç–æ–º–µ—Ü —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'adding_pet' in context.user_data:
        await handle_admin_message(update, context)
    else:
        await update.message.reply_text("‚Ñπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:", exc_info=context.error)
    if update and hasattr(update, 'callback_query'):
        try:
            await update.callback_query.edit_message_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e}")

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê --- #
def main():
    init_db()
    
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)
    
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMINS}")
    app.run_polling()

if __name__ == "__main__":
    main()